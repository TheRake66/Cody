<?php
namespace Kernel\Security;
use Kernel\Debug;
use Kernel\Html;



/**
 * Librairie les vulnerabilites
 */
class Vulnerability {

	/**
	 * Genere un jeton aleatoire de taille n cryptographiquement securisee
	 * 
	 * @param int taille du token en octets
	 * @return string le token
	 */
	static function makeCSRFToken($size = 32) {
		if (function_exists('random_bytes')) {
			return bin2hex(random_bytes($size));
		} elseif (function_exists('openssl_random_pseudo_bytes')) {
			return bin2hex(openssl_random_pseudo_bytes($size));
		} else {
			Debug::log('Attention, impossible de générer le jeton de manière sécurisée. Veuillez activer l\'extention "openssl" ou utiliser PHP 7.0+.', Debug::LEVEL_WARNING);
			return Validation::makeSimpleToken($size);
		}
	}


	/**
	 * Initialise un champ cache pour la protection CSRF
	 * 
	 * @return void
	 */
    static function initCSRF() {
        $token = self::makeCSRFToken();
        $_SESSION['csrf_token'] = $token;
		Debug::log('Génération d\'un jeton CSRF : "' . $token . '".');
        Html::add(
			Html::createElement('input', [
                'type' => 'hidden',
                'name' => 'csrf_token',
                'value' => $token  
        ]));
    }


	/**
	 * Verifie si le jeton CSRF est valide passe
	 * 
	 * @return bool si le jeton est valide
	 */
	static function checkCSRF() {
		if (isset($_SESSION['csrf_token']) && isset($_POST['csrf_token']) &&
			$_SESSION['csrf_token'] === $_POST['csrf_token']) {
			Debug::log('Le jeton CSRF est valide.', Debug::LEVEL_GOOD);
			return true;
		} else {
			Debug::log('Le jeton CSRF est invalide.', Debug::LEVEL_WARNING);
			http_response_code(405);
			return false;
		}
	}

	
	/**
	 * Detruit le jeton CSRF
	 * 
	 * @return void
	 */
	static function destroyCSRF() {
		unset($_SESSION['csrf_token']);
	}


    /**
     * Echappe les balises HTML d'une chaine de caracteres
     * 
     * @param string la chaine
     * @return string la chaine echappee
     */
    static function escapeXSS($string) {
        return htmlspecialchars($string, ENT_QUOTES, 'UTF-8');
    }

}

?>